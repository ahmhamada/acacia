// box shadows
@mixin shadow() {
  -webkit-box-shadow: 0 0px 0px 3px $shadow-black;
  -moz-box-shadow: 0 0px 0px 3px $shadow-black;
  box-shadow: 0 0px 0px 3px $shadow-black;
}

@mixin btnShadow {
  -webkit-box-shadow: 0 1px 4px 6px $shadow-black;
  -moz-box-shadow: 0 1px 4px 6px $shadow-black;
  box-shadow: 0 1px 4px 6px $shadow-black;
}

// vendor prefixes mixin
/*
  ex :  @include prefixer(background-size,cover,webkit moz o);
*/
@mixin prefixer($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-'+ $prefix + '-' + $property}: $value;
  }

  #{$property}: $value;
}

/**
* Media Breakpoints.
*
* Ex:
*   @include bp-max-width($bp-mobile-max-tablet-min) {
*     SCSS Rules .....
*   }
*/
@mixin bp-max-width($screen-size) {
  @media only screen and (max-width: $screen-size) {
    @content;
  }
}

@mixin bp-min-width($screen-size) {
  @media only screen and (min-width: $screen-size) {
    @content;
  }
}

@mixin bp-range($min-screen-size, $max-screen-size) {
  @media only screen and (min-width: $min-screen-size) and (max-width: $max-screen-size) {
    @content;
  }
}

// Transition
@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin text-coloring($color,
  $bck-color,
  $border-color,
  $hvr-color,
  $hvr_bck,
  $hvr-border) {
  color: $color;
  background-color: $bck-color;
  border: 1px solid $border-color;
  transition: all 0.3s ease-in-out;

  &:hover {
    background-color: $hvr_bck;
    color: $hvr-color;
    border: 1px solid $hvr-border;
    background-image: unset;
    @include btnShadow();
  }
}

@mixin element-position($position: false,
  $left: false,
  $top: false,
  $right: false,
  $bottom: flase,
  $z-index: false) {
  position: $position;
  top: $top;
  bottom: $bottom;
  left: $left;
  right: $right;
  z-index: $z-index;
}

@mixin button-size($pad, $gap, $height, $bradius) {
  padding: $pad;
  gap: $gap;
  height: $height;
  border-radius: $bradius;
}

@mixin text-formatting($weight: false,
  $size: false,
  $lheight: false,
  $lspacing: false,
  $color: false) {
  font-weight: $weight;
  font-size: $size;
  line-height: $lheight;
  letter-spacing: $lspacing;
  color: $color;
}

// Grid
@mixin grid-system($display,
  $grid: false,
  $t-columns: flase,
  $t-rows: false,
  $column-g: false,
  $row-g: false,
  $t-areas: false,
  $template: false,
  $gap: false,
  $justify-i: false,
  $justify-c: flase,
  $align-i: false,
  $align-c: false,
  $a-columns: false,
  $a-rows: flase,
  $a-flow: false) {
  display: $display;

  @if $grid {
    grid: $grid;
  }

  @if $t-columns {
    grid-template-columns: $t-columns;
  }

  @if $t-rows {
    grid-template-rows: $t-rows;
  }

  @if $column-g {
    column-gap: $column-g;
  }

  @if $row-g {
    row-gap: $row-g;
  }

  @if $t-areas {
    grid-template-areas: $t-areas;
  }

  @if $template {
    grid-template: $template;
  }

  @if $gap {
    gap: $gap;
  }

  @if $justify-i {
    justify-items: $justify-i;
  }

  @if $justify-c {
    justify-content: $justify-c;
  }

  @if $align-i {
    align-items: $align-i;
  }

  @if $align-c {
    align-content: $align-c;
  }

  @if $a-columns {
    grid-auto-columns: $a-columns;
  }

  @if $a-rows {
    grid-auto-rows: $a-rows;
  }

  @if $a-flow {
    grid-auto-flow: $a-flow;
  }
}

@mixin grid($grid: false,
  $t-columns: flase,
  $t-rows: false,
  $column-g: false,
  $row-g: false,
  $t-areas: false,
  $template: false,
  $gap: false,
  $justify-i: false,
  $justify-c: flase,
  $align-i: false,
  $align-c: false,
  $a-columns: false,
  $a-rows: flase,
  $a-flow: false) {
  @include grid-system(grid,
    $t-columns: $t-columns,
    $t-rows: $t-rows,
    $column-g: $column-g,
    $row-g: $row-g,
    $t-areas: $t-areas,
    $template: $template,
    $gap: $gap,
    $justify-i: $justify-i,
    $justify-c: $justify-c,
    $align-i: $align-i,
    $align-c: $align-c,
    $a-columns: $a-columns,
    $a-rows: $a-rows,
    $a-flow: $a-flow );
}

@mixin inline-grid($grid: false,
  $t-columns: flase,
  $t-rows: false,
  $column-g: false,
  $row-g: false,
  $t-areas: false,
  $template: false,
  $gap: false,
  $justify-i: false,
  $justify-c: flase,
  $align-i: false,
  $align-c: false,
  $a-columns: false,
  $a-rows: flase,
  $a-flow: false) {
  @include grid-system(inline-grid,
    $t-columns: $t-columns,
    $t-rows: $t-rows,
    $column-g: $column-g,
    $row-g: $row-g,
    $t-areas: $t-areas,
    $template: $template,
    $gap: $gap,
    $justify-i: $justify-i,
    $justify-c: $justify-c,
    $align-i: $align-i,
    $align-c: $align-c,
    $a-columns: $a-columns,
    $a-rows: $a-rows,
    $a-flow: $a-flow );
}

// To use this function, use @includen to call
// Example  @include grid($t-columns: 50px 1fr, $t-rows: 10px);
// #2       @include inline-grid($justify-i: center, $align-i: center)

//   flex

@mixin flex-variant($display,
  $direction: false,
  $align: false,
  $justify: false,
  $wrap: false,
  $flow: false) {
  display: $display;

  @if $direction {
    flex-direction: $direction;
  }

  @if $align {
    align-items: $align;
  }

  @if $justify {
    justify-content: $justify;
  }

  @if $wrap {
    flex-wrap: $wrap;
  }

  @if $flow {
    flex-flow: $flow;
  }
}

@mixin flex($direction: false,
  $align: false,
  $justify: false,
  $wrap: false,
  $flow: false) {
  @include flex-variant(flex,
    $direction: $direction,
    $align: $align,
    $justify: $justify,
    $wrap: $wrap,
    $flow: $flow );
}

@mixin inline-flex($direction: false,
  $align: false,
  $justify: false,
  $wrap: false,
  $flow: false) {
  @include flex-variant(inline-flex,
    $direction: $direction,
    $align: $align,
    $justify: $justify,
    $wrap: $wrap,
    $flow: $flow );
}

// To use this function, use @include to call
// Example @include flex($direction: row, $align: center)
